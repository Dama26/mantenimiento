openapi: 3.0.3
info:
  title: API de Mantenimiento
  version: 1.0.0
  description: CRUD completo con autenticación JWT y roles.

servers:
  - url: http://localhost:5000/api

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Login:
      type: object
      required: [correo, contrasena]
      properties:
        correo:
          type: string
          format: email
          example: usuario@ejemplo.com
        contrasena:
          type: string
          example: contraseña123

    TokenResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        user:
          type: object
          properties:
            id:
              type: integer
              example: 1
            nombre:
              type: string
              example: Juan Pérez
            rol:
              type: string
              example: director

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nombre:
          type: string
          example: Juan Pérez
        correo:
          type: string
          example: juan@ejemplo.com
        rol:
          type: string
          example: director

    Ambulancia:
      type: object
      properties:
        id:
          type: integer
          example: 1
        numero_serie:
          type: string
          example: "AMB2023001"
        numero_economico:
          type: string
          example: "AMB001"
        modelo:
          type: string
          example: "Ford Transit"
        anio:
          type: integer
          example: 2022
        nombre_conductor:
          type: string
          example: "Roberto Gómez"

    Taller:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nombre_taller:
          type: string
          example: "Taller Mecánico Central"
        responsable:
          type: string
          example: "Carlos Méndez"
        direccion:
          type: string
          example: "Av. Principal 123"
        telefono:
          type: string
          example: "5551234567"

    Mantenimiento:
      type: object
      properties:
        id:
          type: integer
          example: 1
        ambulancia_id:
          type: integer
          example: 1
        tipo_mantenimiento:
          type: string
          enum: [preventivo, correctivo]
          example: preventivo
        tipo_servicio:
          type: string
          enum: [mayor, menor]
          example: menor
        periodo:
          type: string
          enum: [mensual, trimestral, anual]
          example: mensual
        fecha:
          type: string
          format: date-time
          example: "2023-05-15T10:00:00Z"
        descripcion:
          type: string
          example: "Cambio de aceite y filtros"
        kilometraje:
          type: integer
          example: 15000
        taller_id:
          type: integer
          example: 1
        factura:
          type: string
          example: "FAC-2023-001"

    Gasto:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nombre:
          type: string
          example: "Filtro de aceite"
        cantidad:
          type: integer
          example: 2
        costo_unitario:
          type: number
          format: float
          example: 150.50
        mantenimiento_id:
          type: integer
          example: 1

security:
  - BearerAuth: []

paths:
  /auth/login:
    post:
      tags: [Auth]
      summary: Iniciar sesión
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
            example:
              correo: "admin@ejemplo.com"
              contrasena: "admin123"
      responses:
        '200':
          description: JWT y datos de usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
              example:
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                user:
                  id: 1
                  nombre: "Admin"
                  rol: "director"
        '401':
          description: Credenciales inválidas

  /usuarios:
    get:
      tags: [Usuarios]
      summary: Obtener todos los usuarios
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista de usuarios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              example:
                - id: 1
                  nombre: "Juan Pérez"
                  correo: "juan@ejemplo.com"
                  rol: "director"
                - id: 2
                  nombre: "María López"
                  correo: "maria@ejemplo.com"
                  rol: "encargado"
        '403':
          description: No autorizado
          
    post:
      tags: [Usuarios]
      summary: Crear un nuevo usuario
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [nombre, correo, rol, contrasena]
              properties:
                nombre:
                  type: string
                correo:
                  type: string
                rol:
                  type: string
                  enum: [director, encargado, contador]
                contrasena:
                  type: string
            example:
              nombre: "Nuevo Usuario"
              correo: "nuevo@ejemplo.com"
              rol: "encargado"
              contrasena: "password123"
      responses:
        '201':
          description: Usuario creado
          content:
            application/json:
              example:
                message: "Usuario creado exitosamente"
                id: 3
        '400':
          description: Datos inválidos
        '403':
          description: No autorizado

  /usuarios/{id}:
    get:
      tags: [Usuarios]
      summary: Obtener un usuario por ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 1
                nombre: "Juan Pérez"
                correo: "juan@ejemplo.com"
                rol: "director"
        '404':
          description: Usuario no encontrado
          
    put:
      tags: [Usuarios]
      summary: Actualizar un usuario
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                correo:
                  type: string
                rol:
                  type: string
                  enum: [director, encargado, contador]
                contrasena:
                  type: string
            example:
              nombre: "Juan Pérez Actualizado"
              correo: "juan.actualizado@ejemplo.com"
      responses:
        '200':
          description: Usuario actualizado
          content:
            application/json:
              example:
                message: "Usuario actualizado exitosamente"
        '400':
          description: Datos inválidos
        '403':
          description: No autorizado
        '404':
          description: Usuario no encontrado
          
    delete:
      tags: [Usuarios]
      summary: Eliminar un usuario
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Usuario eliminado
          content:
            application/json:
              example:
                message: "Usuario eliminado exitosamente"
        '403':
          description: No autorizado
        '404':
          description: Usuario no encontrado

  /ambulancias:
    get:
      tags: [Ambulancias]
      summary: Obtener todas las ambulancias
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista de ambulancias
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ambulancia'
              example:
                - id: 1
                  numero_serie: "AMB2023001"
                  numero_economico: "AMB001"
                  modelo: "Ford Transit"
                  anio: 2022
                  nombre_conductor: "Roberto Gómez"
                - id: 2
                  numero_serie: "AMB2023002"
                  numero_economico: "AMB002"
                  modelo: "Mercedes Sprinter"
                  anio: 2021
                  nombre_conductor: "Laura Sánchez"
                  
    post:
      tags: [Ambulancias]
      summary: Crear una nueva ambulancia
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [numero_serie, numero_economico, modelo, anio, nombre_conductor]
              properties:
                numero_serie:
                  type: string
                numero_economico:
                  type: string
                modelo:
                  type: string
                anio:
                  type: integer
                nombre_conductor:
                  type: string
            example:
              numero_serie: "AMB2023003"
              numero_economico: "AMB003"
              modelo: "Chevrolet Express"
              anio: 2023
              nombre_conductor: "Pedro Ramírez"
      responses:
        '201':
          description: Ambulancia creada
          content:
            application/json:
              example:
                message: "Ambulancia creada exitosamente"
                id: 3
        '400':
          description: Datos inválidos

  /ambulancias/{id}:
    get:
      tags: [Ambulancias]
      summary: Obtener una ambulancia por ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Ambulancia encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ambulancia'
              example:
                id: 1
                numero_serie: "AMB2023001"
                numero_economico: "AMB001"
                modelo: "Ford Transit"
                anio: 2022
                nombre_conductor: "Roberto Gómez"
        '404':
          description: Ambulancia no encontrada
          
    put:
      tags: [Ambulancias]
      summary: Actualizar una ambulancia
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                numero_serie:
                  type: string
                numero_economico:
                  type: string
                modelo:
                  type: string
                anio:
                  type: integer
                nombre_conductor:
                  type: string
            example:
              nombre_conductor: "Roberto Gómez Fernández"
              modelo: "Ford Transit 2022"
      responses:
        '200':
          description: Ambulancia actualizada
          content:
            application/json:
              example:
                message: "Ambulancia actualizada exitosamente"
        '400':
          description: Datos inválidos
        '404':
          description: Ambulancia no encontrada
          
    delete:
      tags: [Ambulancias]
      summary: Eliminar una ambulancia
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Ambulancia eliminada
          content:
            application/json:
              example:
                message: "Ambulancia eliminada exitosamente"
        '404':
          description: Ambulancia no encontrada

  /talleres:
    get:
      tags: [Talleres]
      summary: Obtener todos los talleres
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista de talleres
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Taller'
              example:
                - id: 1
                  nombre_taller: "Taller Mecánico Central"
                  responsable: "Carlos Méndez"
                  direccion: "Av. Principal 123"
                  telefono: "5551234567"
                - id: 2
                  nombre_taller: "Taller Especializado"
                  responsable: "Luisa Fernández"
                  direccion: "Calle Secundaria 456"
                  telefono: "5557654321"
                  
    post:
      tags: [Talleres]
      summary: Crear un nuevo taller
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [nombre_taller, responsable, direccion, telefono]
              properties:
                nombre_taller:
                  type: string
                responsable:
                  type: string
                direccion:
                  type: string
                telefono:
                  type: string
            example:
              nombre_taller: "Taller Nuevo"
              responsable: "Ana Martínez"
              direccion: "Av. Nueva 789"
              telefono: "5559876543"
      responses:
        '201':
          description: Taller creado
          content:
            application/json:
              example:
                message: "Taller creado exitosamente"
                id: 3
        '400':
          description: Datos inválidos

  /talleres/{id}:
    get:
      tags: [Talleres]
      summary: Obtener un taller por ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Taller encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Taller'
              example:
                id: 1
                nombre_taller: "Taller Mecánico Central"
                responsable: "Carlos Méndez"
                direccion: "Av. Principal 123"
                telefono: "5551234567"
        '404':
          description: Taller no encontrado
          
    put:
      tags: [Talleres]
      summary: Actualizar un taller
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre_taller:
                  type: string
                responsable:
                  type: string
                direccion:
                  type: string
                telefono:
                  type: string
            example:
              telefono: "5551234567 ext. 101"
              direccion: "Av. Principal 123, Col. Centro"
      responses:
        '200':
          description: Taller actualizado
          content:
            application/json:
              example:
                message: "Taller actualizado exitosamente"
        '400':
          description: Datos inválidos
        '404':
          description: Taller no encontrado
          
    delete:
      tags: [Talleres]
      summary: Eliminar un taller
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Taller eliminado
          content:
            application/json:
              example:
                message: "Taller eliminado exitosamente"
        '404':
          description: Taller no encontrado

  /mantenimientos:
    get:
      tags: [Mantenimientos]
      summary: Obtener todos los mantenimientos
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista de mantenimientos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Mantenimiento'
              example:
                - id: 1
                  ambulancia_id: 1
                  tipo_mantenimiento: "preventivo"
                  tipo_servicio: "menor"
                  periodo: "mensual"
                  fecha: "2023-05-15T10:00:00Z"
                  descripcion: "Cambio de aceite y filtros"
                  kilometraje: 15000
                  taller_id: 1
                  factura: "FAC-2023-001"
                - id: 2
                  ambulancia_id: 2
                  tipo_mantenimiento: "correctivo"
                  tipo_servicio: "mayor"
                  periodo: "anual"
                  fecha: "2023-06-20T09:30:00Z"
                  descripcion: "Reparación de motor"
                  kilometraje: 45000
                  taller_id: 2
                  factura: "FAC-2023-002"
                  
    post:
      tags: [Mantenimientos]
      summary: Crear un nuevo mantenimiento
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ambulancia_id, tipo_mantenimiento, tipo_servicio, fecha, descripcion, kilometraje, taller_id]
              properties:
                ambulancia_id:
                  type: integer
                tipo_mantenimiento:
                  type: string
                  enum: [preventivo, correctivo]
                tipo_servicio:
                  type: string
                  enum: [mayor, menor]
                periodo:
                  type: string
                  enum: [mensual, trimestral, anual]
                fecha:
                  type: string
                  format: date-time
                descripcion:
                  type: string
                kilometraje:
                  type: integer
                taller_id:
                  type: integer
                factura:
                  type: string
            example:
              ambulancia_id: 1
              tipo_mantenimiento: "preventivo"
              tipo_servicio: "menor"
              periodo: "mensual"
              fecha: "2023-07-10T08:00:00Z"
              descripcion: "Revisión general"
              kilometraje: 18000
              taller_id: 1
              factura: "FAC-2023-003"
      responses:
        '201':
          description: Mantenimiento creado
          content:
            application/json:
              example:
                message: "Mantenimiento creado exitosamente"
                id: 3
        '400':
          description: Datos inválidos

  /mantenimientos/{id}:
    get:
      tags: [Mantenimientos]
      summary: Obtener un mantenimiento por ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Mantenimiento encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mantenimiento'
              example:
                id: 1
                ambulancia_id: 1
                tipo_mantenimiento: "preventivo"
                tipo_servicio: "menor"
                periodo: "mensual"
                fecha: "2023-05-15T10:00:00Z"
                descripcion: "Cambio de aceite y filtros"
                kilometraje: 15000
                taller_id: 1
                factura: "FAC-2023-001"
        '404':
          description: Mantenimiento no encontrado
          
    put:
      tags: [Mantenimientos]
      summary: Actualizar un mantenimiento
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ambulancia_id:
                  type: integer
                tipo_mantenimiento:
                  type: string
                  enum: [preventivo, correctivo]
                tipo_servicio:
                  type: string
                  enum: [mayor, menor]
                periodo:
                  type: string
                  enum: [mensual, trimestral, anual]
                fecha:
                  type: string
                  format: date-time
                descripcion:
                  type: string
                kilometraje:
                  type: integer
                taller_id:
                  type: integer
                factura:
                  type: string
            example:
              descripcion: "Cambio de aceite, filtros y revisión de frenos"
              kilometraje: 15200
      responses:
        '200':
          description: Mantenimiento actualizado
          content:
            application/json:
              example:
                message: "Mantenimiento actualizado exitosamente"
        '400':
          description: Datos inválidos
        '404':
          description: Mantenimiento no encontrado
          
    delete:
      tags: [Mantenimientos]
      summary: Eliminar un mantenimiento
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Mantenimiento eliminado
          content:
            application/json:
              example:
                message: "Mantenimiento eliminado exitosamente"
        '404':
          description: Mantenimiento no encontrado

  /gastos:
    get:
      tags: [Gastos]
      summary: Obtener todos los gastos
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista de gastos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Gasto'
              example:
                - id: 1
                  nombre: "Filtro de aceite"
                  cantidad: 2
                  costo_unitario: 150.50
                  mantenimiento_id: 1
                - id: 2
                  nombre: "Aceite sintético"
                  cantidad: 5
                  costo_unitario: 200.75
                  mantenimiento_id: 1
                  
    post:
      tags: [Gastos]
      summary: Crear un nuevo gasto
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [nombre, cantidad, costo_unitario, mantenimiento_id]
              properties:
                nombre:
                  type: string
                cantidad:
                  type: integer
                costo_unitario:
                  type: number
                  format: float
                mantenimiento_id:
                  type: integer
            example:
              nombre: "Bujías"
              cantidad: 4
              costo_unitario: 120.00
              mantenimiento_id: 2
      responses:
        '201':
          description: Gasto creado
          content:
            application/json:
              example:
                message: "Gasto creado exitosamente"
                id: 3
        '400':
          description: Datos inválidos

  /gastos/{id}:
    get:
      tags: [Gastos]
      summary: Obtener un gasto por ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Gasto encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gasto'
              example:
                id: 1
                nombre: "Filtro de aceite"
                cantidad: 2
                costo_unitario: 150.50
                mantenimiento_id: 1
        '404':
          description: Gasto no encontrado
          
    put:
      tags: [Gastos]
      summary: Actualizar un gasto
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                cantidad:
                  type: integer
                costo_unitario:
                  type: number
                  format: float
                mantenimiento_id:
                  type: integer
            example:
              cantidad: 3
              costo_unitario: 145.00
      responses:
        '200':
          description: Gasto actualizado
          content:
            application/json:
              example:
                message: "Gasto actualizado exitosamente"
        '400':
          description: Datos inválidos
        '404':
          description: Gasto no encontrado
          
    delete:
      tags: [Gastos]
      summary: Eliminar un gasto
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Gasto eliminado
          content:
            application/json:
              example:
                message: "Gasto eliminado exitosamente"
        '404':
          description: Gasto no encontrado